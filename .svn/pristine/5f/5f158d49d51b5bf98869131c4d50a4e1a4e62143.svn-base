import { Component,EventEmitter,Input, OnInit, Output,NgModule} from '@angular/core';
import { FormGroup, FormControl, Validators} from '@angular/forms';
import { Router} from '@angular/router';
import {Http, Response, Headers, RequestOptions } from "@angular/http";
import 'rxjs/add/operator/map';
import { BlockComponent } from './../block/block.component';
const IPFSUploader=require('ipfs-image-web-upload');
const Web3 = require('web3');
const contract = require('truffle-contract');
const IPFS = require('ipfs-mini');
const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });
const Readable = require('readable-stream').Readable
var Buffer = require('buffer/').Buffer  
var createContract = require('create-contract');
var Tx = require('ethereumjs-tx');
//var solc = require('solc');
//const fs = require('fs');

//var contractFileName = '../../contracts/Store.sol';
//console.log(contractFileName);
//const contract = require('truffle-contract');
const SimpleStorage = require('../../../build/contracts/SimpleStorage.json');

//import { DataserviceService } from "../dataservice.service";
@Component({
   selector: 'app-mainpage',
   templateUrl: './mainpage.component.html',
   styleUrls: ['./mainpage.component.css']
})

export class MainpageComponent implements OnInit {
   formdata;
   web3: any;
   
   cutomerdata;
   userId: number = 0;
   mining_threads = 1;
     txBlock = 0;
   //constructor(private http: Http) { }
   constructor(private router: Router, private http: Http) {
    this.checkAndInstantiateWeb3();
  // this.checkWork();
    
    }
   //, private dataService: DataserviceService
   stateCtrl: FormControl;
   ngOnInit() {
     // this.checkAndInstantiateWeb3();
      this.formdata = new FormGroup({
         fname: new FormControl("", Validators.compose([
            Validators.required,
            Validators.minLength(3)
         ])),
         lname: new FormControl("", Validators.compose([
            Validators.required,
            Validators.minLength(3)
         ])),
         address:new FormControl(""),
         phoneno:new FormControl(""),
         
      });
      //var file_input = document.getElementById("someFileInputId");
      //console.log(file_input);
      ipfs.add('file_input', (err, result) => {
       // console.log(err, result);

      });
      
   }
   checkAndInstantiateWeb3() {
    // Checking if Web3 has been injected by the browser (Mist/MetaMask)
    this.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
    if (typeof this.web3 !== 'undefined') {
      console.warn('Using web3 detected from external source. If you find that your accounts don\'t appear or you have ' +
        '0 MetaCoin, ensure you\'ve configured that source properly. If using MetaMask, see the following link. Feel ' +
        'free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask');
      // Use Mist/MetaMask's provider
      this.web3 = new Web3(this.web3.currentProvider);
    } else {
      console.warn('No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when ' +
        'you deploy live, as it\'s inherently insecure. Consider switching to Metamask for development. More info ' +
        'here: http://truffleframework.com/tutorials/truffle-and-metamask');
      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
      this.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
    }
    //console.log(this.web3.isConnected());
  }
   registration(data) {

       console.log(data);
       var customer = [];
       var jsonhash
        /*for (var prop in data) {
          //this.cutomerdata.push(data[prop]);
          
          ipfs.add(data[prop], (err, result) => {
            //console.log(err, result);
           // customer.push(result);

          });
        }*/
        
       // console.log(customer);
        
        // result null 'QmTp2hEo8eXRp6wg7jXv1BLCMh5a4F3B7buAUZNZUu772j'
       /* 
        ipfs.cat('QmTp2hEo8eXRp6wg7jXv1BLCMh5a4F3B7buAUZNZUu772j', (err, result) => {
          //console.log(err, result);
        });
        
        // result null 'hello world!'
        
        ipfs.addJSON(data, (err, result) => {
        //console.log(err, result);
         jsonhash=result;
        });
        
        // result null 'QmTp2hEo8eXRp6wg7jXv1BLCMh5a4F3B7buAUZNZUu772j'
        
        ipfs.catJSON(jsonhash, (err, result) => {
         //console.log(err, result);
        });
        ipfs.stat('QmTp2hEo8eXRp6wg7jXv1BLCMh5a4F3B7buAUZNZUu772j', (err, result) => {
          //console.log(err, result);
        });
          */
        //smart contract..................................................................
        const simpleStorage = contract(SimpleStorage);
        //console.log(simpleStorage);
       // var MyContract = contract(myContractDef);
       //var bytecode = simpleStorage['contractName'].bytecode;
       var interfac = simpleStorage.abi;
        // give it web3 powers!
        //console.log(interfac);
        var Contract = this.web3.eth.contract(interfac);
        var truffle = Contract.at('0x4ec0aE4F96d12cF6B446fd503b180A5c30BC93B6');
      // console.log(truffle);
        const pass = "Samsunnahar";
        try {
          this.web3.personal.unlockAccount(this.web3.eth.coinbase, pass);
        } catch(e) {
          console.log(e);
          return;
        }
        var setNumbers = [5,2,4,1];
        truffle.set(setNumbers,{from:this.web3.eth.coinbase}, function(error, result){
          if(!error) {
            console.log("transection" + result + "submitted")
          } else {
              console.error(error);
          }
      })
      //rlp...............................................................................
      /*var Trie = require('merkle-patricia-tree');
      var rlp = require('rlp');
      var levelup = require('levelup');
      //console.log('fdgsdgusdgyryiuyiuyreiuyteriu')
      var db = levelup('/home/null/.ethereum/state');
      
      //the genesis state root
      var root = '12582945fc5ad12c3e7b67c4fc37a68fc0d52d995bb7f7291ff41a2739a7ca16';
      var trie = new Trie(db, root);
      
      //gav's address
      var gav = new Buffer('8a40bfaa73256b60764c1bf40675a99083efb075', 'hex');
      
      trie.get(gav, function (err, val) {
        var decoded = rlp.decode(val);
        console.log(decoded);
      });*/
      //row transection...............................................................
      /*var P_key=this.web3.personal.importRawKey('79eb3459cbb8a3e859561c3333c921527b475bdb1ed435949e4ddc2e5eaba7bd','Samsunnahar')
      //console.log(P_key);
      var privateKey = new Buffer(P_key, 'hex')
    //console.log(privateKey);
    var rawTx = {
      nonce: '0x00',
      gasPrice: '0x09184e72a000', 
      gasLimit: '0x2710',
      to: '0x0000000000000000000000000000000000000000', 
      value: '0x00', 
      data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'
    }
    
    var tx = new Tx(rawTx);
    tx.sign(privateKey);
    
    var serializedTx = tx.serialize();
    
    //console.log(serializedTx.toString('hex'));
    //f889808609184e72a00082271094000000000000000000000000000000000000000080a47f74657374320000000000000000000000000000000000000000000000000000006000571ca08a8bbf888cfa37bbf0bb965423625641fc956967b81d12e23709cead01446075a01ce999b56a8a88504be365442ea61239198e23d1fce7d00fcfc5cd3b44b7215f
    
    this.web3.eth.sendRawTransaction('0x' + serializedTx.toString('hex'), function(err, hash) {
      if (!err)
        console.log(hash); 
        else {
          console.error(err);
      }// "0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385"
    });*/

        //call for mining transections.........................................................
       //this.web3.eth.filter("latest", function(err, block) { this.checkWork(); });
       //this.web3.eth.filter("pending", function(err, block) { this.checkWork(); });

      // this.checkWork();

   }
   //mining................................................................................
        

    checkWork() {
      if (this.web3.eth.getBlock("pending").transactions.length > 0) {
          this.txBlock = this.web3.eth.getBlock("pending").number
          if (this.web3.eth.mining) return;
          console.log("  Transactions pending. Mining...");
          this.web3.miner.start(1); 
          while (this.web3.eth.getBlock("latest").number < this.txBlock + 12) {
            if (this.web3.eth.getBlock("pending").transactions.length > 0) this.txBlock = this.web3.eth.getBlock("pending").number;
              }
          console.log("  12 confirmations achieved; mining stopped.");
          this.web3.miner.stop()
      }
      else {
        this.web3.miner.stop()
          }
    }

   //..........................................................................................
  // getUser() {
    //this.dataService.currentUser.subscribe(user => {
    //  this.userId = user
    //}, err => {
    //  console.log(err);
   // });
  //}
     
   Component1Variable:string="Component1VariableSent";
   //constructor() { }
 
   @Output()
   SendValue=new EventEmitter<string>();
   
   
    onClickSubmit(data) {
      //console.log(data.img);
    
       //document.getElementById("custtable").style.display="";
      this.cutomerdata = [];
      for (var prop in data) {
         this.cutomerdata.push(data[prop]);
      }
      console.log(this.cutomerdata);
      this.registration(this.cutomerdata);
        //var uploader = new IPFSUploader(new IPFS());
      
      //this.router.navigate(['app-block'])
      this.SendValue.emit(this.Component1Variable);
      //this.router.navigate(['app-block']) 
    }

   
}